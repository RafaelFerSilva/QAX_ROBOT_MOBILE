"use strict";
// demo rule to test the gui
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCheck = exports.DirCheck = void 0;
const utils_1 = require("./utils");
const support_1 = require("@appium/support");
const teen_process_1 = require("teen_process");
const doctor_1 = require("./doctor");
const logger_1 = __importDefault(require("./logger"));
const prompt_1 = require("./prompt");
/**
 * @type {import('./factory').DoctorCheckList}
 */
let checks = [];
class DirCheck extends doctor_1.DoctorCheck {
    constructor(path) {
        super({ autofix: false });
        this.path = path;
    }
    async diagnose() {
        if (!(await support_1.fs.exists(this.path))) {
            return (0, utils_1.nok)(`Could NOT find directory at '${this.path}'!`);
        }
        let stats = await support_1.fs.lstat(this.path);
        return stats.isDirectory()
            ? (0, utils_1.ok)(`Found directory at: ${this.path}`)
            : (0, utils_1.nok)(`'${this.path}' is NOT a directory!`);
    }
    // eslint-disable-next-line require-await
    async fix() {
        return `Manually create a directory at: ${this.path}`;
    }
}
exports.DirCheck = DirCheck;
checks.push(new DirCheck('/tmp/appium-doctor'));
checks.push(new DirCheck('/tmp/appium-doctor/demo'));
class FileCheck extends doctor_1.DoctorCheck {
    constructor(path) {
        super({ autofix: true });
        this.path = path;
    }
    async diagnose() {
        return (await support_1.fs.exists(this.path))
            ? (0, utils_1.ok)(`Found file at: ${this.path}`)
            : (0, utils_1.nok)(`Could NOT find file at '${this.path}'!`);
    }
    async fix() {
        logger_1.default.info(`The following command need be executed: touch '${this.path}'`);
        let yesno = await (0, prompt_1.fixIt)();
        if (yesno === 'yes') {
            await (0, teen_process_1.exec)('touch', [this.path]);
        }
        else {
            logger_1.default.info(`Skipping you will need to touch '${this.path}' manually.`);
            throw new doctor_1.FixSkippedError('bbb');
        }
    }
}
exports.FileCheck = FileCheck;
checks.push(new FileCheck('/tmp/appium-doctor/demo/apple.fruit'));
checks.push(new FileCheck('/tmp/appium-doctor/demo/pear.fruit'));
checks.push(new FileCheck('/tmp/appium-doctor/demo/orange.fruit'));
exports.default = checks;
//# sourceMappingURL=demo.js.map