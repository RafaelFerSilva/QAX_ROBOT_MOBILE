export type DoctorOpts = {
    autofix: boolean | null;
};
export class Doctor {
    /**
     * All the sub check goes here after register
     * @type {DoctorCheck[]}
     */
    checks: DoctorCheck[];
    checkOptionals: any[];
    toFix: any[];
    toFixOptionals: any[];
    /**
     * Register all the sub check and combine them together
     * @param {DoctorCheck[] | DoctorCheck} checks
     */
    register(checks: DoctorCheck[] | DoctorCheck): void;
    /**
     * The doctor shows the report
     */
    diagnose(): Promise<void>;
    reportManualFixes(fix: any, fixOptioal: any): Promise<boolean>;
    runAutoFix(f: any): Promise<void>;
    runAutoFixes(): Promise<void>;
    run(): Promise<void>;
    diagnosticResultMessage(result: any, toFixList: any, check: any): Promise<void>;
    fixMessage(length: any, optional?: boolean): Promise<string>;
    reportSuccess(length: any, lengthOptional: any): Promise<boolean>;
}
/**
 * Create interface for other Doctors
 */
export class DoctorCheck {
    /**
     * @param {DoctorOpts} opts
     */
    constructor(opts?: DoctorOpts);
    autofix: boolean;
    /**
     * Every doctor diagnose the symptoms
     * @throws {Error}
     */
    diagnose(): void;
    /**
     * Every doctor suggest the solutions to fix the sickness
     * @throws {Error}
     */
    fix(): void;
}
export class FixSkippedError extends Error {
}
//# sourceMappingURL=doctor.d.ts.map