export type NpmPackageInfo = {
    /**
     * - version
     */
    version: string;
    /**
     * - A path to npm root
     */
    path: string;
};
export type UtilsResult = {
    ok: boolean;
    optional: boolean;
    message: string;
};
/**
 * @param {string} message
 * @returns {UtilsResult}
 */
export function ok(message: string): UtilsResult;
/**
 * @param {string} message
 * @returns {UtilsResult}
 */
export function nok(message: string): UtilsResult;
/**
 * @param {string} message
 * @returns {UtilsResult}
 */
export function okOptional(message: string): UtilsResult;
/**
 * @param {string} message
 * @returns {UtilsResult}
 */
export function nokOptional(message: string): UtilsResult;
export namespace inquirer {
    const prompt: () => B<any>;
}
export function configureBinaryLog(opts: any): void;
/**
 * Return an executable path of cmd
 *
 * @param {string} cmd Standard output by command
 * @return {?string} The full path of cmd. `null` if the cmd is not found.
 */
export function resolveExecutablePath(cmd: string): string | null;
/**
 * @typedef NpmPackageInfo
 * @property {string} version - version
 * @property {string} path - A path to npm root
 */
/**
 * Returns the path and version of given package name
 * @param {string} packageName A package name to get path and version data
 * @return {?NpmPackageInfo}
 */
export function getNpmPackageInfo(packageName: string): NpmPackageInfo | null;
/**
 * If {@link configureBinaryLog} was called, this will restore the original `log` function.
 */
export function resetLog(): void;
import B from 'bluebird';
//# sourceMappingURL=utils.d.ts.map