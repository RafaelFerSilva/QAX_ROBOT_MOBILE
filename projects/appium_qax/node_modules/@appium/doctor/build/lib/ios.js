"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionalLyftCommandCheck = exports.OptionalIOSDeployCommandCheck = exports.OptionalApplesimutilsCommandCheck = exports.OptionalIdbCommandCheck = exports.DevToolsSecurityCheck = exports.XcodeCmdLineToolsCheck = exports.XcodeCheck = exports.fixes = void 0;
const utils_1 = require("./utils"); // eslint-disable-line
const support_1 = require("@appium/support");
const teen_process_1 = require("teen_process");
const doctor_1 = require("./doctor");
const logger_1 = __importDefault(require("./logger"));
const prompt_1 = require("./prompt");
const env_1 = __importDefault(require("./env"));
require("@colors/colors");
/**
 * @type {import('./factory').DoctorCheckList}
 */
let checks = [];
let fixes = {};
exports.fixes = fixes;
// Check for Xcode.
class XcodeCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        let xcodePath;
        try {
            // https://github.com/appium/appium/issues/12093#issuecomment-459358120 can happen
            await (0, teen_process_1.exec)('xcrun', ['simctl', 'help']);
        }
        catch (err) {
            return (0, utils_1.nok)('Error running xcrun simctl');
        }
        try {
            const { stdout } = await (0, teen_process_1.exec)('xcode-select', ['-p']);
            xcodePath = (stdout || '').replace('\n', '');
        }
        catch (err) {
            return (0, utils_1.nok)('Xcode is NOT installed!');
        }
        return xcodePath && (await support_1.fs.exists(xcodePath))
            ? (0, utils_1.ok)(`Xcode is installed at: ${xcodePath}`)
            : (0, utils_1.nok)(`Xcode cannot be found at '${xcodePath}'!`);
    }
    // eslint-disable-next-line require-await
    async fix() {
        return `Manually install ${'Xcode'.bold}, and make sure 'xcode-select -p' command shows proper path like '/Applications/Xcode.app/Contents/Developer'`;
    }
}
exports.XcodeCheck = XcodeCheck;
checks.push(new XcodeCheck());
// Check for Xcode Command Line Tools.
class XcodeCmdLineToolsCheck extends doctor_1.DoctorCheck {
    constructor() {
        super({ autofix: true });
    }
    async diagnose() {
        const errMess = 'Xcode Command Line Tools are NOT installed!';
        try {
            // https://stackoverflow.com/questions/15371925/how-to-check-if-command-line-tools-is-installed
            const stdout = (await (0, teen_process_1.exec)('xcode-select', ['-p'])).stdout;
            return (0, utils_1.ok)(`Xcode Command Line Tools are installed in: ${stdout.trim()}`);
        }
        catch (err) {
            logger_1.default.debug(err);
            return (0, utils_1.nok)(errMess);
        }
    }
    async fix() {
        logger_1.default.info(`The following command need be executed: xcode-select --install`);
        let yesno = await (0, prompt_1.fixIt)();
        if (yesno === 'yes') {
            await (0, teen_process_1.exec)('xcode-select', ['--install']);
        }
        else {
            logger_1.default.info(`Skipping you will need to install ${'Xcode'.bold} manually.`);
            throw new doctor_1.FixSkippedError();
        }
    }
}
exports.XcodeCmdLineToolsCheck = XcodeCmdLineToolsCheck;
checks.push(new XcodeCmdLineToolsCheck());
// Dev Tools Security
class DevToolsSecurityCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        const errMess = 'DevToolsSecurity is NOT enabled!';
        let stdout;
        try {
            stdout = (await (0, teen_process_1.exec)('DevToolsSecurity', [])).stdout;
        }
        catch (err) {
            logger_1.default.debug(err);
            return (0, utils_1.nok)(errMess);
        }
        return stdout && stdout.match(/enabled/) ? (0, utils_1.ok)('DevToolsSecurity is enabled.') : (0, utils_1.nok)(errMess);
    }
}
exports.DevToolsSecurityCheck = DevToolsSecurityCheck;
checks.push(new DevToolsSecurityCheck());
checks.push(new env_1.default('HOME'));
class OptionalLyftCommandCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        const lyftCmd = await (0, utils_1.resolveExecutablePath)('set-simulator-location');
        if (lyftCmd) {
            return (0, utils_1.okOptional)('set-simulator-location is installed');
        }
        return (0, utils_1.nokOptional)('set-simulator-location is not installed');
    }
    // eslint-disable-next-line require-await
    async fix() {
        return (`${'set-simulator-location'.bold} is needed to set location for Simulator. ` +
            'Please read https://github.com/lyft/set-simulator-location to install it');
    }
}
exports.OptionalLyftCommandCheck = OptionalLyftCommandCheck;
checks.push(new OptionalLyftCommandCheck());
class OptionalIdbCommandCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        const fbIdbPath = await (0, utils_1.resolveExecutablePath)('idb');
        const fbCompanionIdbPath = await (0, utils_1.resolveExecutablePath)('idb_companion');
        if (fbIdbPath && fbCompanionIdbPath) {
            return (0, utils_1.okOptional)('idb and idb_companion are installed');
        }
        if (!fbIdbPath && fbCompanionIdbPath) {
            return (0, utils_1.nokOptional)('idb is not installed');
        }
        else if (fbIdbPath && !fbCompanionIdbPath) {
            return (0, utils_1.nokOptional)('idb_companion is not installed');
        }
        return (0, utils_1.nokOptional)('idb and idb_companion are not installed');
    }
    // eslint-disable-next-line require-await
    async fix() {
        return `Why ${'idb'.bold} is needed and how to install it: ${OptionalIdbCommandCheck.idbReadmeURL}`;
    }
}
exports.OptionalIdbCommandCheck = OptionalIdbCommandCheck;
// link to idb README.md
// https://github.com/appium/appium-ios/blob/main/packages/idb/README.md
OptionalIdbCommandCheck.idbReadmeURL = 'https://git.io/JnxQc';
checks.push(new OptionalIdbCommandCheck());
class OptionalApplesimutilsCommandCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        const applesimutilsPath = await (0, utils_1.resolveExecutablePath)('applesimutils');
        return applesimutilsPath
            ? (0, utils_1.okOptional)(`applesimutils is installed at: ${applesimutilsPath}. Installed versions are: ${(await (0, teen_process_1.exec)('brew', ['list', '--versions', 'applesimutils'])).stdout.trim()}`)
            : (0, utils_1.nokOptional)('applesimutils cannot be found');
    }
    // eslint-disable-next-line require-await
    async fix() {
        return `Why ${'applesimutils'.bold} is needed and how to install it: http://appium.io/docs/en/drivers/ios-xcuitest/`;
    }
}
exports.OptionalApplesimutilsCommandCheck = OptionalApplesimutilsCommandCheck;
checks.push(new OptionalApplesimutilsCommandCheck());
class OptionalIOSDeployCommandCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        const iosDeployPath = await (0, utils_1.resolveExecutablePath)('ios-deploy');
        return iosDeployPath
            ? (0, utils_1.okOptional)(`ios-deploy is installed at: ${iosDeployPath}. Installed version is: ${(await (0, teen_process_1.exec)(iosDeployPath, ['-V'])).stdout.trim()}`)
            : (0, utils_1.nokOptional)('ios-deploy cannot be found');
    }
    // eslint-disable-next-line require-await
    async fix() {
        return `${'ios-deploy'.bold} is used as a fallback command to install iOS applications to real device. Please read https://github.com/ios-control/ios-deploy/ to install it`;
    }
}
exports.OptionalIOSDeployCommandCheck = OptionalIOSDeployCommandCheck;
checks.push(new OptionalIOSDeployCommandCheck());
exports.default = checks;
//# sourceMappingURL=ios.js.map