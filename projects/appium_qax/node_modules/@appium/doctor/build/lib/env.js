"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const support_1 = require("@appium/support");
const doctor_1 = require("./doctor");
const utils_1 = require("./utils");
require("@colors/colors");
// Check env variables
class EnvVarAndPathCheck extends doctor_1.DoctorCheck {
    constructor(varName) {
        super();
        this.varName = varName;
    }
    async diagnose() {
        let varValue = process.env[this.varName];
        if (typeof varValue === 'undefined') {
            return (0, utils_1.nok)(`${this.varName} environment variable is NOT set!`);
        }
        if (await support_1.fs.exists(varValue)) {
            return (0, utils_1.ok)(`${this.varName} is set to: ${varValue}`);
        }
        let err_msg = `${this.varName} is set to '${varValue}' but this is NOT a valid path!`;
        // On Windows, when the env var has %LOCALAPPDATA%, fs.exists cannot resolve the path.
        // Then, it would be safe to request the user to set the full path instead.
        if (support_1.system.isWindows() && varValue.includes('%LOCALAPPDATA%')) {
            err_msg += ` Please set '${process.env.LOCALAPPDATA}' instead of '%LOCALAPPDATA%' as the environment variable.`;
        }
        return (0, utils_1.nok)(err_msg);
    }
    fix() {
        return (`Make sure the environment variable ${this.varName.bold} is properly configured for the Appium process. ` +
            `Refer https://github.com/appium/java-client/blob/master/docs/environment.md for more details.`);
    }
}
exports.default = EnvVarAndPathCheck;
//# sourceMappingURL=env.js.map