"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionalGstreamerCheck = exports.OptionalAppBundleCheck = exports.JavaOnPathCheck = exports.AndroidToolCheck = exports.EnvVarAndPathCheck = void 0;
const doctor_1 = require("./doctor");
const utils_1 = require("./utils");
const support_1 = require("@appium/support");
const path_1 = __importDefault(require("path"));
const env_1 = __importDefault(require("./env"));
exports.EnvVarAndPathCheck = env_1.default;
require("@colors/colors");
const appium_adb_1 = require("appium-adb");
const logger_1 = __importDefault(require("./logger"));
/**
 * @type {import('./factory').DoctorCheckList}
 */
let checks = [];
const javaHome = support_1.system.isWindows() ? '%JAVA_HOME%' : '$JAVA_HOME';
checks.push(new env_1.default('ANDROID_HOME'));
checks.push(new env_1.default('JAVA_HOME'));
// Check that the PATH includes the jdk's bin directory
class JavaOnPathCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        if (process.env.JAVA_HOME) {
            const javaHomeBin = path_1.default.resolve(process.env.JAVA_HOME, 'bin');
            return (await support_1.fs.exists(javaHomeBin))
                ? (0, utils_1.ok)(`'bin' subfolder exists under '${process.env.JAVA_HOME}'`)
                : (0, utils_1.nok)(`'bin' subfolder does not exist under '${process.env.JAVA_HOME}'. ` +
                    `Is ${javaHome} set to a proper value?`);
        }
        return (0, utils_1.nok)(`Cannot check ${javaHome} requirements since the environment variable itself is not set`);
    }
    fix() {
        return `Set ${javaHome} environment variable to the root folder path of your local JDK installation`;
    }
}
exports.JavaOnPathCheck = JavaOnPathCheck;
// Check tools
class AndroidToolCheck extends doctor_1.DoctorCheck {
    constructor() {
        super();
        this.tools = ['adb', 'emulator', `apkanalyzer${support_1.system.isWindows() ? '.bat' : ''}`];
        this.noBinaries = [];
    }
    async diagnose() {
        const listOfTools = this.tools.join(', ');
        const sdkRoot = (0, appium_adb_1.getSdkRootFromEnv)();
        if (!sdkRoot) {
            return (0, utils_1.nok)(`${listOfTools} could not be found because ANDROID_HOME or ANDROID_SDK_ROOT is NOT set!`);
        }
        logger_1.default.info(`   Checking ${listOfTools}`);
        for (const binary of this.tools) {
            try {
                logger_1.default.info(`     '${binary}' is in ${await (0, appium_adb_1.getAndroidBinaryPath)(binary)}`);
            }
            catch (e) {
                this.noBinaries.push(binary);
            }
        }
        if (this.noBinaries.length > 0) {
            return (0, utils_1.nok)(`${this.noBinaries.join(', ')} could NOT be found in ${sdkRoot}!`);
        }
        return (0, utils_1.ok)(`${listOfTools} exist: ${sdkRoot}`);
    }
    fix() {
        if (typeof process.env.ANDROID_HOME === 'undefined') {
            return `Manually configure ${'ANDROID_HOME'.bold} and run appium-doctor again.`;
        }
        return (`Manually install ${this.noBinaries.join(', ').bold} and add it to ${'PATH'.bold}. ` +
            'https://developer.android.com/studio#cmdline-tools and ' +
            'https://developer.android.com/studio/intro/update#sdk-manager may help to setup.');
    }
}
exports.AndroidToolCheck = AndroidToolCheck;
checks.push(new AndroidToolCheck());
checks.push(new JavaOnPathCheck());
class OptionalAppBundleCheck extends doctor_1.DoctorCheck {
    async diagnose() {
        const bundletoolPath = await (0, utils_1.resolveExecutablePath)('bundletool.jar');
        return bundletoolPath
            ? (0, utils_1.okOptional)(`bundletool.jar is installed at: ${bundletoolPath}`)
            : (0, utils_1.nokOptional)('bundletool.jar cannot be found');
    }
    // eslint-disable-next-line require-await
    async fix() {
        return (`${'bundletool.jar'.bold} is used to handle Android App Bundle. Please read http://appium.io/docs/en/writing-running-appium/android/android-appbundle/ to install it` +
            `${support_1.system.isWindows()
                ? '. Also consider adding the ".jar" extension into your PATHEXT environment variable in order to fix the problem for Windows'
                : ''}`);
    }
}
exports.OptionalAppBundleCheck = OptionalAppBundleCheck;
checks.push(new OptionalAppBundleCheck());
class OptionalGstreamerCheck extends doctor_1.DoctorCheck {
    constructor() {
        super(...arguments);
        this.GSTREAMER_BINARY = `gst-launch-1.0${support_1.system.isWindows() ? '.exe' : ''}`;
        this.GST_INSPECT_BINARY = `gst-inspect-1.0${support_1.system.isWindows() ? '.exe' : ''}`;
    }
    async diagnose() {
        const gstreamerPath = await (0, utils_1.resolveExecutablePath)(this.GSTREAMER_BINARY);
        const gstInspectPath = await (0, utils_1.resolveExecutablePath)(this.GST_INSPECT_BINARY);
        return gstreamerPath && gstInspectPath
            ? (0, utils_1.okOptional)(`${this.GSTREAMER_BINARY} and ${this.GST_INSPECT_BINARY} are installed at: ${gstreamerPath} and ${gstInspectPath}`)
            : (0, utils_1.nokOptional)(`${this.GSTREAMER_BINARY} and/or ${this.GST_INSPECT_BINARY} cannot be found`);
    }
    // eslint-disable-next-line require-await
    async fix() {
        return (`${`${this.GSTREAMER_BINARY} and ${this.GST_INSPECT_BINARY}`.bold} are used to stream the screen of the device under test. ` +
            'Please read https://appium.io/docs/en/writing-running-appium/android/android-screen-streaming/ to install them and for more details');
    }
}
exports.OptionalGstreamerCheck = OptionalGstreamerCheck;
checks.push(new OptionalGstreamerCheck());
exports.default = checks;
//# sourceMappingURL=android.js.map