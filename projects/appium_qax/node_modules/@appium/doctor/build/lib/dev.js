"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AndroidSdkExists = exports.BinaryIsInPathCheck = void 0;
const doctor_1 = require("./doctor");
const utils_1 = require("./utils");
const support_1 = require("@appium/support");
const path_1 = __importDefault(require("path"));
require("@colors/colors");
/**
 * @type {import('./factory').DoctorCheckList}
 */
let checks = [];
// Check PATH binaries
class BinaryIsInPathCheck extends doctor_1.DoctorCheck {
    constructor(binary) {
        super();
        this.binary = binary;
    }
    async diagnose() {
        const resolvedPath = await (0, utils_1.resolveExecutablePath)(this.binary);
        if (!resolvedPath) {
            return (0, utils_1.nok)(`${this.binary} is MISSING in PATH: ${process.env.PATH}`);
        }
        return (0, utils_1.ok)(`${this.binary} was found at ${resolvedPath}`);
    }
    fix() {
        return `Manually install the ${this.binary.bold} binary and add it to ${'PATH'.bold}.`;
    }
}
exports.BinaryIsInPathCheck = BinaryIsInPathCheck;
checks.push(new BinaryIsInPathCheck(support_1.system.isWindows() ? 'mvn.bat' : 'mvn'));
checks.push(new BinaryIsInPathCheck(support_1.system.isWindows() ? 'ant.bat' : 'ant'));
checks.push(new BinaryIsInPathCheck(support_1.system.isWindows() ? 'adb.exe' : 'adb'));
// Check Android SDKs
class AndroidSdkExists extends doctor_1.DoctorCheck {
    constructor(sdk) {
        super();
        this.sdk = sdk;
    }
    async diagnose() {
        if (typeof process.env.ANDROID_HOME === 'undefined') {
            return (0, utils_1.nok)(`${this.sdk} could not be found because ANDROID_HOME is NOT set!`);
        }
        let sdkPath = path_1.default.resolve(process.env.ANDROID_HOME, path_1.default.join('platforms', this.sdk));
        return (await support_1.fs.exists(sdkPath))
            ? (0, utils_1.ok)(`${this.sdk} was found at: ${sdkPath}`)
            : (0, utils_1.nok)(`${this.sdk} could NOT be found at '${sdkPath}'!`);
    }
    fix() {
        if (typeof process.env.ANDROID_HOME === 'undefined') {
            return `Manually configure ${'ANDROID_HOME'.bold}.`;
        }
        return `Manually install the ${this.sdk.bold} sdk.`;
    }
}
exports.AndroidSdkExists = AndroidSdkExists;
checks.push(new AndroidSdkExists('android-16'));
checks.push(new AndroidSdkExists('android-19'));
exports.default = checks;
//# sourceMappingURL=dev.js.map